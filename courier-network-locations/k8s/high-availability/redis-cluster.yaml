apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: micro-social-ecommerce
spec:
  serviceName: redis
  replicas: 3
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - redis
            topologyKey: "kubernetes.io/hostname"
      containers:
      - name: redis
        image: redis:6-alpine
        command:
          - redis-server
          - "/etc/redis/redis.conf"
          - "--protected-mode"
          - "no"
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 200m
            memory: 512Mi
        ports:
        - containerPort: 6379
          name: redis
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: redis-config
          mountPath: /etc/redis
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          timeoutSeconds: 1
      volumes:
      - name: redis-config
        configMap:
          name: redis-config
  volumeClaimTemplates:
  - metadata:
      name: redis-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: micro-social-ecommerce
  labels:
    app: redis
spec:
  ports:
  - port: 6379
    targetPort: 6379
    name: redis
  clusterIP: None
  selector:
    app: redis
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: micro-social-ecommerce
data:
  redis.conf: |
    appendonly yes
    cluster-enabled yes
    cluster-config-file /data/nodes.conf
    cluster-node-timeout 5000
    dir /data
    port 6379
  setup-redis.sh: |
    #!/bin/sh
    set -e

    # Wait for all pods to be ready
    echo "Waiting for all Redis pods to be ready..."
    for i in $(seq 0 2); do
      until ping -c 1 redis-$i.redis; do
        echo "Waiting for redis-$i.redis to be available..."
        sleep 1
      done
    done

    echo "Creating Redis cluster..."
    redis-cli --cluster create \
      redis-0.redis:6379 \
      redis-1.redis:6379 \
      redis-2.redis:6379 \
      --cluster-replicas 0 \
      --cluster-yes
    
    echo "Redis cluster created successfully!"
